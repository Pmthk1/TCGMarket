generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuctionStatus {
  PENDING
  ACTIVE
  CLOSED
  COMPLETED
}

enum PaymentMethod {
  PROMPTPAY
  CREDIT_CARD
  BANK_TRANSFER
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                 String        @id @default(uuid())
  clerkId            String        @unique
  username           String        @unique
  email              String        @unique
  role               UserRole      @default(USER)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  Bids               Bid[]
  Orders             Order[]
  TransactionsBuyer  Transaction[] @relation("BuyerTransactions")
  TransactionsSeller Transaction[] @relation("SellerTransactions")
  Auctions           Auction[]     @relation("HighestBidder")
  Payments           Payment[]     @relation("UserPayments")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String
  imageUrl    String
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Card {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  auctions    Auction[] @relation("CardAuctions")
}

model Auction {
  id               String        @id @default(uuid())
  cardId           String        
  card             Card          @relation(fields: [cardId], references: [id], name: "CardAuctions", onDelete: Cascade)
  cardName         String
  startPrice       Float
  currentPrice     Float
  highestBidderId  String?       
  highestBidder    User?         @relation(fields: [highestBidderId], references: [id], name: "HighestBidder", onDelete: SetNull)
  startTime        DateTime
  endTime          DateTime
  status           AuctionStatus @default(PENDING)
  createdAt        DateTime      @default(now())
  Bids             Bid[] 
  Transactions     Transaction[] @relation("AuctionTransactions")
  description      String?
  imageUrl         String?

  @@index([cardId])
}

model Bid {
  id        String   @id @default(uuid())
  auctionId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidderId  String
  bidder    User     @relation(fields: [bidderId], references: [id], onDelete: Cascade)
  amount    Float
  bidTime   DateTime @default(now())

  @@index([auctionId])
}

model Order {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount     Float
  paymentMethod   PaymentMethod @default(PROMPTPAY)
  paymentStatus   PaymentStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Payments        Payment[] @relation("OrderPayments")

  @@index([userId])
}

model Transaction {
  id              String   @id @default(uuid())
  auctionId       String
  auction         Auction  @relation(fields: [auctionId], references: [id], name: "AuctionTransactions", onDelete: Cascade)
  buyerId         String
  buyer           User     @relation(fields: [buyerId], references: [id], name: "BuyerTransactions", onDelete: Cascade)
  sellerId        String
  seller          User     @relation(fields: [sellerId], references: [id], name: "SellerTransactions", onDelete: Cascade)
  price           Float
  paymentMethod   PaymentMethod @default(PROMPTPAY)
  paymentStatus   PaymentStatus @default(PENDING)
  transactionDate DateTime @default(now())

  @@index([auctionId])
}

model Payment {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], name: "UserPayments", onDelete: Cascade)
  orderId         String?
  order           Order?   @relation(fields: [orderId], references: [id], name: "OrderPayments", onDelete: Cascade)
  amount          Float
  paymentDate     DateTime @default(now())
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  proofOfTransfer String?
  qrCodeUrl       String?
  status          PaymentStatus @default(PENDING)
  items           PaymentItem[]

  @@index([userId])
  @@index([orderId])
}

model PaymentItem {
  id        String   @id @default(uuid())
  paymentId String
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  name      String
  imageUrl  String
  quantity  Int
}
