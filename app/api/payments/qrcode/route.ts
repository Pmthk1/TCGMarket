import { NextResponse } from "next/server";
import { supabaseAdmin } from "@/utils/supabase";

const PROMPTPAY_ID = "0987654321"; // ‚úÖ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç PromptPay

export async function POST(req: Request) {
  try {
    const { userId, amount, orderId, email, clerkId } = await req.json();

    console.log("üìå Data Received:", { userId, amount, orderId, email, clerkId });

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    if (!userId || !amount || !orderId || !email || !clerkId) {
      console.error("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö:", { userId, amount, orderId, email, clerkId });
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
    }
    if (typeof amount !== "number" || amount <= 0) {
      console.error("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", amount);
      return NextResponse.json({ error: "Invalid amount" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const { data: existingOrder } = await supabaseAdmin
      .from("Order")
      .select("id")
      .eq("id", orderId)
      .single();

    if (!existingOrder) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Order ID:", orderId);
      return NextResponse.json({ error: "Invalid orderId" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: existingUser } = await supabaseAdmin
      .from("User")
      .select("id")
      .eq("id", userId)
      .single();

    if (!existingUser) {
      console.log("‚ÑπÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...");
      const { data: existingClerkUser } = await supabaseAdmin
        .from("User")
        .select("id")
        .eq("clerkId", clerkId)
        .single();

      if (existingClerkUser) {
        console.error("‚ùå Clerk ID ‡∏ã‡πâ‡∏≥:", clerkId);
        return NextResponse.json({ error: "Clerk ID already exists" }, { status: 400 });
      }

      const { error: insertUserError } = await supabaseAdmin
        .from("User")
        .insert([{ 
          id: userId, 
          clerkId, 
          username: `user_${userId}`, 
          email, 
          role: "user" 
        }]);

      if (insertUserError) {
        console.error("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", insertUserError);
        return NextResponse.json({ error: "Failed to create user", details: insertUserError.message }, { status: 500 });
      }
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: existingPayment } = await supabaseAdmin
      .from("Payment")
      .select("id")
      .eq("orderId", orderId)
      .eq("paymentStatus", "pending")
      .single();

    if (existingPayment) {
      console.error("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß:", orderId);
      return NextResponse.json({ error: "This order already has a pending payment" }, { status: 400 });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code URL
    const qrCodeUrl = `https://promptpay.io/${PROMPTPAY_ID}/${amount}.png`;
    console.log("‚úÖ QR Code URL:", qrCodeUrl);

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Supabase
    const { data: paymentData, error: paymentError } = await supabaseAdmin
      .from("Payment")
      .insert([
        { 
          userId, 
          amount, 
          orderId, 
          qrCodeUrl, 
          paymentStatus: "pending", 
          paymentMethod: "promptpay" 
        }
      ])
      .select()
      .single();

    if (paymentError) {
      console.error("‚ùå Supabase Insert Error:", paymentError);
      return NextResponse.json({ error: "Database error", details: paymentError.message }, { status: 500 });
    }

    console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", paymentData);
    return NextResponse.json({ qrCodeUrl, paymentId: paymentData.id });

  } catch (error: unknown) {
    console.error("‚ùå Server Error:", error);
    const errorMessage = error instanceof Error ? error.message : "Unknown error occurred";
    return NextResponse.json({ error: "Internal Server Error", details: errorMessage }, { status: 500 });
  }
}
