import prisma from "@/lib/prisma";
import { NextResponse } from "next/server";
import { writeFile } from "fs/promises";
import fs from "fs";
import path from "path";

const uploadDir = path.join(process.cwd(), "public/uploads");

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `/public/uploads/` ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î)
export async function GET() {
  try {
    const auctions = await prisma.auction.findMany({
      include: {
        card: {
          select: {
            name: true,
            imageUrl: true, // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πå‡∏î
          },
        },
      },
    });

    return NextResponse.json(auctions, { status: 200 });
  } catch (error) {
    console.error("üö® Error fetching auctions:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

// ‚úÖ POST: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
export async function POST(req: Request) {
  try {
    const formData = await req.formData();

    // üõ† ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å formData
    let cardId = formData.get("cardId")?.toString() || "";
    const cardName = formData.get("cardName")?.toString() || "";
    const description = formData.get("description")?.toString() || "";
    const category = formData.get("category")?.toString() || "";
    const startPriceRaw = formData.get("startPrice");
    const startTimeRaw = formData.get("startTime");
    const endTimeRaw = formData.get("endTime");
    const image = formData.get("image") as File | null;

    // üõ† ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const startPrice = startPriceRaw ? Number(startPriceRaw) : NaN;
    const startTime = startTimeRaw ? new Date(startTimeRaw as string) : new Date("");
    const endTime = endTimeRaw ? new Date(endTimeRaw as string) : new Date("");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!cardName || !category || isNaN(startPrice) || isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
      return NextResponse.json(
        { error: "Missing or invalid required fields" },
        { status: 400 }
      );
    }

    if (endTime <= startTime) {
      return NextResponse.json({ error: "End time must be after start time" }, { status: 400 });
    }

    // üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
    let card = await prisma.card.findFirst({
      where: { name: cardName },
    });

    if (!card) {
      card = await prisma.card.create({
        data: {
          name: cardName,
          imageUrl: "",
          category,
        },
      });
    }

    cardId = card.id;

    // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
    let imageUrl = "";
    if (image) {
      try {
        const bytes = await image.arrayBuffer();
        const buffer = Buffer.from(bytes);
        const filePath = path.join(uploadDir, image.name);

        await writeFile(filePath, buffer);
        imageUrl = `/uploads/${image.name}`;
      } catch {
        console.error("üö® Image upload failed");
        return NextResponse.json({ error: "Image upload failed" }, { status: 500 });
      }
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const newAuction = await prisma.auction.create({
      data: {
        cardId,
        cardName,
        description,
        category,
        startPrice,
        currentPrice: startPrice,
        startTime,
        endTime,
        status: "PENDING",
        imageUrl,
      },
      include: {
        card: true,
      },
    });

    return NextResponse.json(newAuction, { status: 201 });
  } catch (error) {
    console.error("üö® Error creating auction:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
