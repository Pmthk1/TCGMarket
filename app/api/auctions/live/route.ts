import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";

export async function GET() {
  try {
    const now = new Date();

    const liveAuctions = await prisma.auction.findMany({
      where: {
        startTime: { lte: now }, // startTime <= ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        endTime: { gt: now }, // endTime > ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        status: { not: "CLOSED" }, // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î
      },
      include: { 
        card: { 
          select: {
            name: true, 
            imageUrl: true,
          } 
        } 
      },
    });

    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á imageUrl ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    const formattedAuctions = liveAuctions.map(auction => ({
      ...auction,
      card: auction.card
        ? {
            ...auction.card,
            imageUrl: auction.card.imageUrl?.trim() || auction.imageUrl?.trim() || null, // ‡πÉ‡∏ä‡πâ imageUrl ‡∏Ç‡∏≠‡∏á card ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ auction.imageUrl, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null
          }
        : null,
      imageUrl: auction.imageUrl?.trim() || null, // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô "" ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ null
    }));

    console.log("‚úÖ Live Auctions with Image:", formattedAuctions);

    return NextResponse.json(formattedAuctions, { status: 200 });
  } catch (error) {
    console.error("üö® Error fetching live auctions:", error);
    return NextResponse.json(
      { error: "Failed to fetch live auctions" },
      { status: 500 }
    );
  }
}
